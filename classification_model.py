# -*- coding: utf-8 -*-
"""Paper Model Klasifikasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9wsFsytzlRmHSnn4oc9SmpfPbtlxee7

#Import Library
"""

!pip install --upgrade xgboost scikit-learn

import pandas as pd
import numpy as np
from sklearn import preprocessing

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import cross_val_score, KFold

from google.colab import drive
drive.mount('/content/drive')

"""The dataset used as input contains 15,751 genes with 945 patients or samples (Supplementary 10)."""

data = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/RNA_encoding.csv')

subtype_counts = data['SUBTYPE'].value_counts().sort_index()

plt.figure(figsize=(7,6))
ax = sns.barplot(x=subtype_counts.index, y=subtype_counts.values, palette="viridis")

for i, val in enumerate(subtype_counts.values):
    ax.text(i, val + 5, str(val), ha='center', fontsize=8, fontweight='bold')

plt.xlabel("Subtype")
plt.ylabel("Number of Patients")
plt.title("Distribution of Patient Sample Data by Subtype")
plt.show()

"""Subtype Description:
- 0 = BRCA_Basal
- 1 = BRCA_Her2
- 2 = BRCA_LumA
- 3 = BRCA_LumB

#Modeling

##Gradient Boosting
"""

data.head()

X = data.drop(columns=['Id_Sample','SUBTYPE'], axis=1)
y = data['SUBTYPE']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

print("Jumlah data total:", len(X))
print("Jumlah data training:", len(X_train))
print("Jumlah data testing:", len(X_test))

#Gradient Boosting
GB_model = OneVsRestClassifier(GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, min_samples_split=2))
GB_model.fit(X_train, y_train)
train_pred_gb = GB_model.predict(X_train)
test_pred_gb = GB_model.predict(X_test)

accuracy_score(y_test.to_numpy(), test_pred_gb)

print(classification_report(y_test.to_numpy(), test_pred_gb))

"""###Cross Validation"""

k_fold = KFold(n_splits=10)
cv_scores = cross_val_score(GB_model, X, y, cv=k_fold)

print("Cross-validation scores:", cv_scores)
print("Mean CV Score:", cv_scores.mean())

"""###Feature Importance"""

feature_importance_per_subtype = {}

for i, subtype in enumerate(GB_model.classes_):
    feature_importance_GB = pd.DataFrame({
        "Gene": X.columns,
        "Importance": GB_model.estimators_[i].feature_importances_
    }).sort_values(by="Importance", ascending=False)

    feature_importance_per_subtype[subtype] = feature_importance_GB.set_index("Gene")

importance_GB = pd.concat(feature_importance_per_subtype, axis=1)
importance_GB.columns = list(feature_importance_per_subtype.keys())

importance_GB

#importance_GB.to_excel('/content/drive/MyDrive/Data_TA/Dataset/GB_feature.xlsx', index=True)

"""###Confusion Matrix"""

cm_GB = confusion_matrix(y_test.to_numpy(), test_pred_gb)

class_labels = ["BRCA_Basal", "BRCA_HER2", "BRCA_LumA", "BRCA_LumB"]

plt.figure(figsize=(6,5))
sns.heatmap(cm_GB, annot=True, fmt="d", cmap="Blues", xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

"""##XGBoost"""

import xgboost as xgb
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.multiclass import OneVsRestClassifier

X = data.drop(columns=['Id_Sample','SUBTYPE'], axis=1)
y = data['SUBTYPE']

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42, stratify=y)

#XGBoost
XGB_model = OneVsRestClassifier(XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, eval_metric='mlogloss', objective='multi:softmax', num_class=4))
XGB_model.fit(X_train, y_train)
train_pred_xgb = XGB_model.predict(X_train)
test_pred_xgb = XGB_model.predict(X_test)

accuracy_score(y_test.to_numpy(), test_pred_xgb)

print(classification_report(y_test.to_numpy(), test_pred_xgb))

"""###Cross Validation"""

from sklearn.model_selection import StratifiedKFold, cross_val_score

k_fold = KFold(n_splits=10)
scores = cross_val_score(XGB_model, X, y, cv=k_fold, scoring='accuracy')

print(f"Cross-validation scores: {scores}")
print(f"Mean accuracy: {scores.mean():.4f}")

"""###Feature Importance"""

feature_importance_per_subtype = {}

for i, subtype in enumerate(XGB_model.classes_):
    feature_importance_XGB = pd.DataFrame({
        "Gene": X.columns,
        "Importance": XGB_model.estimators_[i].feature_importances_
    }).sort_values(by="Importance", ascending=False)

    feature_importance_per_subtype[subtype] = feature_importance_XGB.set_index("Gene")

importance_XGB = pd.concat(feature_importance_per_subtype, axis=1)
importance_XGB.columns = list(feature_importance_per_subtype.keys())

importance_XGB #Nilai Feature importance secara umum, untuk seluruh class (Subtype Kanker)

importance_XGB.to_excel('/content/drive/MyDrive/Data_TA/Dataset/XGB_feature.xlsx', index=True)

"""###Confusion Matrix"""

cm_xgb = confusion_matrix(y_test.to_numpy(), test_pred_xgb)

class_labels = ["BRCA_Basal", "BRCA_HER2", "BRCA_LumA", "BRCA_LumB"]

plt.figure(figsize=(6,5))
sns.heatmap(cm_xgb, annot=True, fmt="d", cmap="Blues", xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

"""##Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

X = data.drop(columns=['Id_Sample','SUBTYPE'], axis=1)
y = data['SUBTYPE']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

RF_model = OneVsRestClassifier(RandomForestClassifier(n_estimators=100, criterion='entropy',max_depth=None))
RF_model.fit(X_train, y_train)
train_pred_rf = RF_model.predict(X_train)
test_pred_rf = RF_model.predict(X_test)

accuracy_score(y_test.to_numpy(), test_pred_rf)

print(classification_report(y_test.to_numpy(), test_pred_rf))

"""###Cross Validation"""

k_fold = KFold(n_splits=10)
scores = cross_val_score(RF_model, X, y, cv=k_fold, scoring='accuracy')

print(f"Cross-validation scores: {scores}")
print(f"Mean accuracy: {scores.mean():.4f}")

"""###Feature Importance"""

feature_importance_per_subtype = {}

for i, subtype in enumerate(RF_model.classes_):
    RF_importance = pd.DataFrame({
        "Gene": X.columns,
        "Importance": RF_model.estimators_[i].feature_importances_
    }).sort_values(by="Importance", ascending=False)

    feature_importance_per_subtype[subtype] = RF_importance.set_index("Gene")


RF_importance = pd.concat(feature_importance_per_subtype, axis=1)
RF_importance.columns = list(feature_importance_per_subtype.keys())

RF_importance

RF_importance.to_excel('/content/drive/MyDrive/Data_TA/Dataset/RF_feature.xlsx', index=True)

"""###Confusion Matrix"""

cm_RF = confusion_matrix(y_test.to_numpy(), test_pred_rf)

class_labels = ["BRCA_Basal", "BRCA_HER2", "BRCA_LumA", "BRCA_LumB"]

plt.figure(figsize=(6,5))
sns.heatmap(cm_RF, annot=True, fmt="d", cmap="Blues", xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()