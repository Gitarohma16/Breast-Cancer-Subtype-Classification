# -*- coding: utf-8 -*-
"""Data Prepocessing (Paper).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fixTZ2OsoZcDYvtIaxPPrzVXIVPats2
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing

from google.colab import drive
drive.mount('/content/drive')

df_RNA = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/Data_RNA_mentah.csv')

df_RNA.head()

"""#Data Cleaning  (Missing Value)

The Data Cleaning Stage is done to clean data from missing values, where unknown or empty gene names will be deleted. The same thing is also done on clinical data to clean patient data whose subtype is unknown or has the subtype "Normal".

Number of Data Before Cleaning
- Gene = 20531
- Sample/Patient = 1084
"""

df_RNA_cleaned = df_RNA.dropna(subset=['Hugo_Symbol'])#Cleaning of anonymous gene data

df_RNA_cleaned

#Entrez Gene Id column will be removed as it is not used in research
df_RNA_cleaned.drop(columns=["Entrez_Gene_Id"], inplace=True)

df_klinis = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/Data_Klinis.csv')#Clinical Data

df_klinis

#Patient data with unknown subtype (blank) / Normal will be deleted.
df_klinis_clean = df_klinis.dropna(subset=['SUBTYPE']).loc[df_klinis['SUBTYPE'] != 'BRCA_Normal']

df_klinis_clean.head()

"""After the RNA data and clinical data are cleared of missing values, the data cleaning process will continue by cleaning the RNA data from samples that have the BRCA_Normal subtype. So that the remaining samples in the RNA data are only patients who have one of the 4 main subtypes of breast cancer used in the study."""

ID_subtype = df_klinis_clean["PATIENT_ID"].tolist()

#Used to match the front ID in clinical data with that in RNA data.
patient_prefixes = set([pid[:12] for pid in ID_subtype])

metadata_columns = ['Hugo_Symbol']
rna_columns = [col for col in df_RNA_cleaned.columns if col[:12] in patient_prefixes]

rna_filter_ID = df_RNA_cleaned[metadata_columns + rna_columns]

rna_filter_ID

"""Number of Data After Cleaning Process
- Gene = 20518
- Sample/Patient = 945
"""

#Save RNA data that is free from missing values ​​and samples with the subtype "Normal"
#rna_filter_ID.to_csv('/content/drive/MyDrive/Data_TA/Dataset/RNA_cleaned.csv', index=False) #This data will be normalized

"""#Data Selection

Data selection is done to sort the genes that will be used for input data. The selected genes are only those with a basemean value >= 10. The basemean value is obtained from the differential expression analysis process at the data normalization stage using DESeq2.
"""

#The RNA data to be sorted is a dataset that has gone through the data normalization process.
RNA_normalized = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/Normalisasi_RNA.csv')

RNA_normalized.head()

#Differential Result Expression used to filter data using the basemean parameter
DEA_result = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/DEA_deseq2.csv')

DEA_result

#Filter genes using basemean parameter >= 10
filter_gen = DEA_result[DEA_result["baseMean"] >= 10]["Hugo_Symbol"]

filter_data_RNA = RNA_normalized[RNA_normalized["Hugo_Symbol"].isin(filter_gen)]
number_of_gene = len(filter_data_RNA)
print("Number of genes with baseMean >= 10:", number_of_gene)

filter_data_RNA.head()

#filter_data_RNA.to_csv('/content/drive/MyDrive/Data_TA/Dataset/gen_selection.csv', index=False)

"""After the data selection process with the basemean parameter set >= 10, the number of genes was reduced from 20,518 to 15,751. This total gene is the one used in the classification modeling process later.

#Data Labeling
"""

data_RNA = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/gen_selection.csv') #Dataset contains previously selected gene data.

data_RNA.head()

"""Before labeling the data, it is necessary to transpose the data to swap the rows and columns, so that the rows represent the patient's sample position, while each column represents a gene."""

transpose_RNA = data_RNA.transpose()

transpose_RNA.head()

transpose_RNA.rename(index={'Hugo_Symbol': 'Id_Sample'}, inplace=True)

transpose_RNA.head()

RNA_transpose = pd.read_csv('/content/drive/MyDrive/Data_TA/Dataset/transpose_RNA.csv')

# Extracting the patient_id and subtype columns from clinical data
df_klinis_clean = df_klinis_clean[["PATIENT_ID", "SUBTYPE"]]

#Match patient_id from clinical data with sample_id in RNA data
RNA_transpose["PATIENT_ID"] = RNA_transpose["Id_Sample"].str[:12]

rna_subtype = RNA_transpose.merge(df_klinis_clean, on="PATIENT_ID", how="left") #Adding subtype column to RNA data
rna_subtype = rna_subtype.drop(columns=["PATIENT_ID"])

rna_subtype.head()

#rna_subtype.to_csv('/content/drive/MyDrive/Data_TA/Dataset/data_label.csv', index=False)

"""#Data Transformation (Label Encoding)

Because there is categorical data in the dataset used, namely cancer subtypes, it is necessary to transform the data using label encoding techniques.
"""

rna_subtype['SUBTYPE'].unique()

label_encoder = preprocessing.LabelEncoder()

rna_subtype['SUBTYPE']= label_encoder.fit_transform(rna_subtype['SUBTYPE'])
rna_subtype['SUBTYPE'].unique()

"""Label Encoding Description:
- 0 = BRCA_Basal
- 1 = BRCA_Her2
- 2 = BRCA_LumA
- 3 = BRCA_LumB
"""

rna_subtype.head()

#This dataset will later be used as input data.
#rna_subtype.to_csv('/content/drive/MyDrive/Data_TA/Dataset/RNA_encoding.csv', index=False)